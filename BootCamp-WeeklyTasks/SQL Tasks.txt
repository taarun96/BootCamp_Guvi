Exercise 1 — Tasks
1.Find the title of each film
		SELECT title FROM movies;
2.Find the director of each film
		SELECT director FROM movies;
3.Find the title and director of each film
		SELECT title,director FROM movies;
4.Find the title and year of each film
		SELECT title,year FROM movies;
5.Find all the information about each film
		SELECT * FROM movies;
		
********************************************************************************************
		
Exercise 2 — Tasks
1.Find the movie with a row id of 6
		SELECT * FROM movies where id=6;
2.Find the movies released in the years between 2000 and 2010
		SELECT * FROM movies where year between 2000 and 2010;
3.Find the movies not released in the years between 2000 and 2010
		SELECT * FROM movies where year not between 2000 and 2010;
4.Find the first 5 Pixar movies and their release year
		SELECT * FROM movies where id<=5;
		

*********************************************************************************************

Exercise 3 — Tasks
1.Find all the Toy Story movies
		SELECT title, director FROM movies WHERE title LIKE "Toy Story%";
2.Find all the movies directed by John Lasseter
		SELECT title, director FROM movies where director like "John Lasseter";
3.Find all the movies (and director) not directed by John Lasseter
		SELECT title, director FROM movies where director not like "John Lasseter";
4.Find all the WALL-* movies
		SELECT * FROM movies where title like "Wall-_";
		
*********************************************************************************************

Exercise 4 — Tasks
1.List all directors of Pixar movies (alphabetically), without duplicates 
		SELECT distinct director FROM movies ORDER BY director ;
2.List the last four Pixar movies released (ordered from most recent to least)
		SELECT * FROM movies ORDER BY year desc limit 4 ;
3.List the first five Pixar movies sorted alphabetically
		SELECT title FROM movies ORDER BY title limit 5 ;
4.List the next five Pixar movies sorted alphabetically	
		SELECT title FROM movies ORDER BY title limit 5 offset 5;

*********************************************************************************************

Review 5 — Tasks
1.List all the Canadian cities and their populations 
		SELECT * FROM north_american_cities where country like "canada";
2.Order all the cities in the United States by their latitude from north to south
		SELECT * FROM north_american_cities where country like "united states" order by latitude desc;
3.List all the cities west of Chicago, ordered from west to east
		SELECT city, longitude FROM north_american_cities WHERE longitude < -87.629798 ORDER BY longitude;
4.List the two largest cities in Mexico (by population)
		SELECT * FROM north_american_cities where country like "mexico" order by population desc limit 2;
5.List the third and fourth largest cities (by population) in the United States and their population
		SELECT * FROM north_american_cities where country like "united states" order by population desc limit 2 offset 2;
		
*********************************************************************************************

Exercise 6 — Tasks
1.Find the domestic and international sales for each movie
		SELECT title,id,movie_id,domestic_sales,international_sales FROM movies inner join boxoffice on movie_id = id ;
2.Show the sales numbers for each movie that did better internationally rather than domestically
		SELECT * FROM movies JOIN boxoffice ON movies.id = boxoffice.movie_id WHERE international_sales > domestic_sales;
3.List all the movies by their ratings in descending order
		SELECT title,rating,domestic_sales,international_sales FROM movies inner join boxoffice on movie_id = id order by rating desc;

*********************************************************************************************

Exercise 7 — Tasks
1.Find the list of all buildings that have employees ✓
		SELECT distinct building_name  FROM employees left join buildings on building_name=building ;
2.Find the list of all buildings and their capacity
		SELECT * FROM buildings;
3.List all buildings and the distinct employee roles in each building (including empty buildings)
		SELECT DISTINCT building_name, role FROM buildings LEFT JOIN employees ON building_name = building;
		
		
*********************************************************************************************

Exercise 8 — Tasks
1.Find the name and role of all employees who have not been assigned to a building
		SELECT name, role FROM employees WHERE building IS NULL;
2.Find the names of the buildings that hold no employees
		SELECT * FROM buildings LEFT JOIN employees ON building_name = building WHERE role IS NULL;
		
*********************************************************************************************
	
Exercise 9 — Tasks
1.List all movies and their combined sales in millions of dollars
		SELECT title, (domestic_sales + international_sales) / 1000000 AS total_sales
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
2.List all movies and their ratings in percent
		SELECT title,rating*10 as percent from boxoffice inner join movies on id=movie_id;
3.List all movies that were released on even number years
		SELECT title, year FROM movies WHERE year % 2 = 0;
		
*********************************************************************************************

Exercise 10 — Tasks
1.Find the longest time that an employee has been at the studio ✓
		SELECT name,role,MAX(years_employed) as oldest_employee FROM employees;
2.For each role, find the average number of years employed by employees in that role
		SELECT role, AVG(years_employed) as Average_years_employed FROM employees GROUP BY role;
3.Find the total number of employee years worked in each building
		SELECT building,sum(years_employed) as TotalEmployedYears from employees group by building;
		

*********************************************************************************************


Exercise 11 — Tasks
1.Find the number of Artists in the studio (without a HAVING clause) ✓
		SELECT role, COUNT(*) as Number_of_artists FROM employees WHERE role = "Artist";
2.Find the number of Employees of each role in the studio ✓
		SELECT role, COUNT(*) as Number_of_artists FROM employees group by role;
3.Find the total number of years employed by all Engineers
		SELECT SUM(Years_employed) FROM employees where role="Engineer";
		
		
*********************************************************************************************
		
Exercise 12 — Tasks
1.Find the number of movies each director has directed ✓
		SELECT director,count(*) director as AllMovies FROM movies group by director;
2.Find the total domestic and international sales that can be attributed to each director
		SELECT director, SUM(domestic_sales + international_sales) as Cumulative_sales_from_all_movies
FROM movies
    INNER JOIN boxoffice
        ON movies.id = boxoffice.movie_id
GROUP BY director;


*********************************************************************************************

Exercise 13 — Tasks
1.Add the studio's new production, Toy Story 4 to the list of movies (you can use any director) ✓
		Insert into movies values(4,"Toy Story 4","Taarun",2021,127);
2.Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table.
		Insert into boxoffice values(4,8.7,340000000,270000000);

*********************************************************************************************

Exercise 14 — Tasks
1.The director for A Bug's Life is incorrect, it was actually directed by John Lasseter
		update Movies set director="John Lasseter" where title like "A Bug's Life";
2.The year that Toy Story 2 was released is incorrect, it was actually released in 1999
		update movies set year=1999 where title like "toy story 2";
3.Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich	
		update movies set title="Toy Story 3",director="Lee Unkrich" where id=11;
		

*********************************************************************************************

Exercise 15 — Tasks
1.This database is getting too big, lets remove all movies that were released before 2005.
		delete FROM movies where year < 2005;
2.Andrew Stanton has also left the studio, so please remove all movies directed by him.
		DELETE FROM movies where director = "Andrew Stanton";
		
*********************************************************************************************		
		
Exercise 16 — Tasks
1.Create a new table named Database with the following columns:
		– Name A string (text) describing the name of the database
		– Version A number (floating point) of the latest version of this database
		– Download_count An integer count of the number of times this database was downloaded
		This table has no constraints. ✓
		
		create table database(
    Name TEXT,
    Version FLOAT,
    Download_count INTEGER
    );
	
	
*********************************************************************************************

Exercise 17 — Tasks
1.Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in. ✓
		ALTER TABLE movies ADD Aspect_ratio FLOAT ;
2.Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English.	
		ALTER TABLE movies
ADD Language TEXT OptionalTableConstraint 
    DEFAULT "English" ;
	
	
*********************************************************************************************

Exercise 18 — Tasks
1.We've sadly reached the end of our lessons, lets clean up by removing the Movies table
		DROP TABLE IF EXISTS movies;
2.And drop the BoxOffice table as well
		DROP TABLE IF EXISTS boxoffice;




		SELECT distinct building_name  FROM employees left join buildings on building_name=building ;


		SELECT * FROM employees WHERE building IS NULL;


				SELECT DISTINCT building_name FROM buildings  JOIN employees ON building_name = building WHERE role IS NULL;
